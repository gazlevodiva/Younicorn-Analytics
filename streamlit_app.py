from methods import get_data
from methods import getUniqActiveUsersPerDay

import streamlit as st
import pandas as pd
import altair as alt
import requests
import datetime



st.title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Younicorn üìà")

# Get data from logs
df = get_data()

# Get min & max date from data
min_date = df['Date'].min()
max_date = df['Date'].max()

# –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
start_week_date = max_date - datetime.timedelta(days=10)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
start_date, end_date = st.date_input('**–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:**', [start_week_date, max_date])

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ datetime64
start_date = pd.to_datetime(start_date)
end_date   = pd.to_datetime(end_date)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
period_df = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
period_df.loc[:, 'Date'] = period_df['Date'].dt.floor('H' if (end_date - start_date).days <= 5 else 'D')

# –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# Total users count
all_users    = df['Telegram Id'].nunique()
period_users = period_df['Telegram Id'].nunique()

# Total users with seller id
all_sellers    = df[df['Seller Id'] != 0]['Telegram Id'].nunique()
period_sellers = period_df[period_df['Seller Id'] != 0]['Telegram Id'].nunique()

# Users blocks the bot
all_blocks    = df[df['Action'] == 'stop_bot'].shape[0]
period_blocks = period_df[period_df['Action'] == 'stop_bot'].shape[0]

all_tasks_done    = df[df['Action'] == 'task_stage_5_quiz'].shape[0]
period_tasks_done = period_df[period_df['Action'] == 'task_stage_5_quiz'].shape[0]

col1, col2, col3, col4 = st.columns(4)

col1.metric(
    label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    value=all_users,
    delta=period_users
)
col2.metric(
    label="–ü—Ä–æ–¥–∞–≤—Ü—ã",
    value=all_sellers,
    delta=period_sellers
)
col3.metric(
    label="–ë–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏",
    value=all_blocks,
    delta=period_blocks
)
col4.metric(
    label="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
    value=all_tasks_done,
    delta=period_tasks_done
)


daily_active_users_count = getUniqActiveUsersPerDay( period_df )
    
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
unique_users = df['Telegram Id'].unique()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
first_action_dates = {}

# –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
for user in unique_users:
    # –í—ã–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rows = df[df['Telegram Id'] == user]
        
    # –í—ã–±–æ—Ä –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_action_date = user_rows['Date'].min()
        
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å
    first_action_dates[user] = first_action_date

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–∞—Ç –∏–ª–∏ —á–∞—Å–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
all_dates = pd.date_range(start=start_date, end=end_date, freq='D') if (end_date - start_date).days >= 5 else pd.date_range(start=start_date, end=end_date, freq='H')

# –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
full_data = pd.DataFrame(all_dates, columns=['Date'])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–ª—è–º–∏
full_data['Active Users'] = 0
full_data['New Users'] = 0

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
first_action_dates_only_date = {k: v.date() for k, v in first_action_dates.items() if pd.notnull(v)}

# –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∫–æ–Ω–µ—á–Ω–æ–π –∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π –º–µ–Ω—å—à–µ 5 –¥–Ω–µ–π, —Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç 'datetime'
# –ò–Ω–∞—á–µ - –≤ 'date'
if (end_date - start_date).days < 5:
    for i in range(len(full_data)):
        datetime = full_data.loc[i, 'Date']
        if datetime in daily_active_users_count['Date'].values:
            full_data.loc[i, 'Active Users'] = daily_active_users_count[daily_active_users_count['Date'] == datetime]['Count'].values[0]
        full_data.loc[i, 'New Users'] = list(first_action_dates.values()).count(datetime)
else:
    for i in range(len(full_data)):
        date = full_data.loc[i, 'Date'].date()
        if date in daily_active_users_count['Date'].dt.date.values:
            full_data.loc[i, 'Active Users'] = daily_active_users_count[daily_active_users_count['Date'].dt.date == date]['Count'].values[0]
        full_data.loc[i, 'New Users'] = list(first_action_dates_only_date.values()).count(date)


# –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ "long" —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã
full_data_long = full_data.melt('Date', var_name='Category', value_name='Count')

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
chart = alt.Chart(full_data_long).mark_line().encode(
    x       = 'Date:T',
    y       = 'Count:Q',
    color   = 'Category:N',
    tooltip = ['Date', 'Count', 'Category']
).interactive()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
st.subheader("–ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
st.altair_chart(chart, use_container_width=True)

###############################################################
    
# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ Action Type –∏ –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
action_counts_bar = (
    period_df['Action']
    .value_counts()
    .reset_index()
)

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
action_counts_bar.columns = ['Action', 'Count']

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
action_chart = (
    alt.Chart(action_counts_bar)
    .mark_bar()
    .encode(
        x='Count',
        y=alt.Y('Action:N', sort='-x'),
        tooltip=['Action', 'Count']
    )
    .interactive()
)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
st.altair_chart(action_chart, use_container_width=True)

###############################################################

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def process_user_data(df):
    user_data_df = df.groupby('Telegram Id').agg({'Date': ['min', 'max'], 'Action': 'count'}).reset_index()
    user_data_df.columns = ['Telegram Id', 'First Action', 'Last Action', 'Actions count']

    user_task_stage_5_quiz = df[df['Action'] == 'task_stage_5_quiz'].groupby('Telegram Id').size().reset_index()
    user_task_stage_5_quiz.columns = ['Telegram Id', 'Complete tasks']

    user_data_df = pd.merge(user_data_df, user_task_stage_5_quiz, on='Telegram Id', how='left')
    user_data_df['Telegram Id'] = user_data_df['Telegram Id'].astype(str).replace(',', '', regex=True)

    
    for chat_id in user_data_df['Telegram Id'].astype(str):
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç Telegram API
        bot_token = st.secrets["bot_token"] # –≤–∞—à —Ç–æ–∫–µ–Ω
        url = f"https://api.telegram.org/bot{bot_token}/getChat?chat_id={chat_id}"
        json_data = requests.get(url, allow_redirects=True).json()

        user_data = json_data['result'] if json_data['result']['id'] == int(chat_id) else None

        if user_data is not None:
            
            user_data_df.loc[user_data_df['Telegram Id'] == str(chat_id), 'First Name'] = user_data.get('first_name', '')
            user_data_df.loc[user_data_df['Telegram Id'] == str(chat_id), 'Last Name']  = user_data.get('last_name', '')
            user_data_df.loc[user_data_df['Telegram Id'] == str(chat_id), 'Username']   = user_data.get('username', '')

    return user_data_df

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
sellers_df = df[df['Seller Id'] != 0]
sellers_data = process_user_data(sellers_df)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ-–ø—Ä–æ–¥–∞–≤—Ü–æ–≤
non_sellers_df = df[df['Seller Id'] == 0]
non_sellers_data = process_user_data(non_sellers_df)

st.write(f"–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥–∞—Ü–æ–≤:")
st.write(sellers_data)

st.write(f"–¢–∞–±–ª–∏—Ü–∞ –Ω–µ-–ø—Ä–æ–¥–∞–≤—Ü–æ–≤:")
st.write(non_sellers_data)
