import streamlit as st
import pandas as pd
import altair as alt


st.title(" –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Younicorn üìà ")

if True:
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
    df = pd.read_excel("export.xlsx")

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞—Ç–æ–π –≤ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö datetime
    df['Date'] = pd.to_datetime(df['Created Date UTC'], errors='coerce')
    df = df.dropna(subset=['Date'])

    min_date = df['Date'].min()
    max_date = df['Date'].max()  
    start_date, end_date = st.date_input('**–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:**', [min_date, max_date])

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ datetime64
    start_date = pd.to_datetime(start_date)
    end_date = pd.to_datetime(end_date)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    period_df = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    period_df['Date'] = period_df['Date'].dt.floor('H' if (end_date - start_date).days < 5 else 'D')

    #### Users cards metrics ####
    
    col1, col2, col3 = st.columns(3)

    # Total users count
    all_users    = df['Telegram Id'].nunique()
    period_users = period_df['Telegram Id'].nunique()

    col1.metric(
        label = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", 
        value = all_users, 
        delta = period_users
    )

    # Total users with seller id
    all_sellers    = df[df['Seller Id'] != 0]['Telegram Id'].nunique()
    period_sellers = period_df[period_df['Seller Id'] != 0]['Telegram Id'].nunique()

    col2.metric(
        label = "–ü—Ä–æ–¥–∞–≤—Ü—ã", 
        value = all_sellers, 
        delta = period_sellers
    ) 

    # Users blocks the bot
    all_blocks = df[df['Action'] == 'stop_bot'].shape[0]
    period_blocks = period_df[period_df['Action'] == 'stop_bot'].shape[0]

    col3.metric(
        label = "–ë–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏", 
        value = all_blocks, 
        delta = period_blocks
    ) 

    ###############################################################

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º –∏ Telegram ID –∏ –ø–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    daily_active_users = period_df.groupby(['Date', 'Telegram Id'])['Telegram Id'].nunique().reset_index(name='Count')

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º –∏ –ø–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å
    daily_active_users_count = daily_active_users.groupby('Date')['Count'].sum().reset_index()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    unique_users = df['Telegram Id'].unique()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_action_dates = {}

    # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user in unique_users:
        # –í—ã–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_rows = df[df['Telegram Id'] == user]
        
        # –í—ã–±–æ—Ä –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        first_action_date = user_rows['Date'].min()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å
        first_action_dates[user] = first_action_date

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–∞—Ç –∏–ª–∏ —á–∞—Å–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
    all_dates = pd.date_range(start=start_date, end=end_date, freq='D') if (end_date - start_date).days >= 5 else pd.date_range(start=start_date, end=end_date, freq='H')

    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    full_data = pd.DataFrame(all_dates, columns=['Date'])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–ª—è–º–∏
    full_data['Active Users'] = 0
    full_data['New Users'] = 0

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    first_action_dates_only_date = {k: v.date() for k, v in first_action_dates.items() if pd.notnull(v)}

    # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∫–æ–Ω–µ—á–Ω–æ–π –∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π –º–µ–Ω—å—à–µ 5 –¥–Ω–µ–π, —Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç 'datetime'
    # –ò–Ω–∞—á–µ - –≤ 'date'
    if (end_date - start_date).days < 5:
        for i in range(len(full_data)):
            datetime = full_data.loc[i, 'Date']
            if datetime in daily_active_users_count['Date'].values:
                full_data.loc[i, 'Active Users'] = daily_active_users_count[daily_active_users_count['Date'] == datetime]['Count'].values[0]
            full_data.loc[i, 'New Users'] = list(first_action_dates.values()).count(datetime)
    else:
        for i in range(len(full_data)):
            date = full_data.loc[i, 'Date'].date()
            if date in daily_active_users_count['Date'].dt.date.values:
                full_data.loc[i, 'Active Users'] = daily_active_users_count[daily_active_users_count['Date'].dt.date == date]['Count'].values[0]
            full_data.loc[i, 'New Users'] = list(first_action_dates_only_date.values()).count(date)


    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ "long" —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã
    full_data_long = full_data.melt('Date', var_name='Category', value_name='Count')

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    chart = alt.Chart(full_data_long).mark_line().encode(
        x='Date:T',
        y='Count:Q',
        color='Category:N',
        tooltip=['Date', 'Count', 'Category']
    ).interactive()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
    st.subheader("–ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    st.altair_chart(chart, use_container_width=True)

    ###############################################################
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ Action Type –∏ –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    action_counts_bar = period_df['Action'].value_counts().reset_index()

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
    action_counts_bar.columns = ['Action', 'Count']

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    action_chart = (
        alt.Chart(action_counts_bar)
        .mark_bar()
        .encode(
            x='Count',
            y=alt.Y('Action:N', sort='-x'),
            tooltip=['Action', 'Count']
        )
        .interactive()
    )

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    st.altair_chart(action_chart, use_container_width=True)

